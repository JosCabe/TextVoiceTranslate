import os
import platform
import time
import subprocess
import trafilatura
import jieba
import sys
import tkinter as tk
from tkinter import messagebox
from gtts import gTTS
from langdetect import detect
from googletrans import Translator
from summa.summarizer import summarize


class TextoAVoz:
    """
    Objeto que gestiona la conversi√≥n de texto a voz a partir de diferentes fuentes:
    texto fijo, entrada por teclado, archivos locales y art√≠culos web.
    """

    # __init__
    def __init__(self):
        self.texto = ""

        # Detectar si ejecutamos desde un .exe (PyInstaller)
        if getattr(sys, 'frozen', False):
            base_path = sys._MEIPASS  # Carpeta temporal donde PyInstaller extrae archivos
            ffmpeg_ruta_local = os.path.join(base_path, "ffmpeg", "bin", "ffmpeg.exe")
        else:
            ffmpeg_ruta_local = os.path.join("ffmpeg", "bin", "ffmpeg.exe")

        # Ruta de respaldo (la original que usabas)
        ruta_respaldo = "D:\\ffmpeg-7.1.1-essentials_build\\bin\\ffmpeg.exe"

        # Verificar cu√°l usar
        self.ruta_ffmpeg = ffmpeg_ruta_local if os.path.exists(ffmpeg_ruta_local) else ruta_respaldo



    #M√©todo texto entrada por teclado
    def leer_input(self):
        self.texto = input("De Texto a Voz, introduce el texto: ") 
       

    #M√©todo texto archivos locales
    def leer_archivo(self, ruta):
        try:
           with open(ruta, "r", encoding="utf-8") as archivo:
               self.texto = archivo.read()              
        except FileNotFoundError:
            print("archivo no encontrado.")

    #M√©todo texto art√≠culos web
    def leer_url(self, url):
        try:
            downloaded = trafilatura.fetch_url(url)
            if downloaded:
                self.texto = trafilatura.extract(downloaded, include_comments = False)
                return "Texto extra√≠do correctamente de la URL."
            else:    
                self.texto = ""
                return "No se pudo descargar el contenido de la URL."
        except Exception as e:
            print(f"Error al procesar la URL: {e}")


    #M√©todo texto pasado a audio
    def reproducir(self):
        try:
            # Inicializar ventana ra√≠z de Tkinter para los messagebox
            root = tk.Tk()
            root.withdraw()
            
            print("\nüéôÔ∏è INICIANDO CONVERSI√ìN DE TEXTO A VOZ...")

            # Detecci√≥n de idioma
            idioma_detectado = detect(self.texto)
            idioma_tag = idioma_detectado[:2].upper()
            print(f"üåç Idioma detectado: {idioma_tag}")

            # Definir nombre del archivo base
            nombre_base = f"Audio_{idioma_tag}.mp3"

            # Definir nombres y rutas seguras
            carpeta_segura = os.getcwd()
            ruta_completa_original = os.path.join(carpeta_segura, nombre_base)

            nombre_acelerado = f"Idioma detectado - {idioma_tag}.mp3"
            ruta_completa_acelerado = os.path.join(carpeta_segura, nombre_acelerado)

            # Generar y guardar audio original
            self.audio = gTTS(text=self.texto, lang=idioma_detectado)
            self.audio.save(ruta_completa_original)
            print(f"‚úÖ Audio guardado como '{nombre_base}'")

            # Ejecutar FFmpeg con subprocess
            print(f"[DEBUG] Ejecutando FFmpeg para acelerar audio...")
            subprocess.run([
                self.ruta_ffmpeg,
                "-y",
                "-i", ruta_completa_original,
                "-filter:a", "atempo=1.25",
                "-id3v2_version", "3",
                "-metadata", f"title=Idioma detectado: {idioma_tag}",
                "-metadata", f"artist=Texto a Voz Inteligente",
                "-metadata", f"album=Conversi√≥n R√°pida",
                "-metadata", f"genre=Voz Sint√©tica",
                "-metadata", f"track=1",
                ruta_completa_acelerado
            ], check=True)

            # Verificar archivo generado
            if os.path.exists(ruta_completa_acelerado):
                print(f"‚ö° Audio acelerado generado correctamente como: {ruta_completa_acelerado}")
                self.ruta_audio = ruta_completa_acelerado
            else:
                raise FileNotFoundError(f"No se encontr√≥ el archivo generado: {ruta_completa_acelerado}") 

            # Esperar para asegurar que el sistema lo pueda abrir
            time.sleep(1.5)

            # Reproducci√≥n autom√°tica (con ventana del reproductor)
            print("üéØ Intentando reproducir el audio...")
            sistema = platform.system()
            print(f"üñ•Ô∏è Sistema operativo detectado: {sistema}")
            try:
                if sistema == "Windows":
                    try:
                        os.startfile(self.ruta_audio)
                    except Exception:
                        subprocess.Popen(['wmplayer.exe', self.ruta_audio], shell=True)
                        print("‚úÖ Audio reproducido con subprocess + wmplayer.exe")    
                elif sistema == "Darwin":  # macOS
                    subprocess.call(["afplay", self.ruta_audio])
                elif sistema == "Linux":
                    subprocess.call(["xdg-open", self.ruta_audio])
                else:
                    print("‚ùå Reproducci√≥n autom√°tica no soportada en este sistema.")
            except Exception as e:
                print(f"‚ùå Error al abrir el reproductor: {e}")

            # Preguntar si se desean eliminar los archivos
            respuesta = messagebox.askyesno("Eliminar archivo original", f"¬øDeseas eliminar el archivo '{nombre_base}' despu√©s de ser reproducido?")

            if respuesta:
                for archivo in [ruta_completa_original, ruta_completa_acelerado]:
                    try:
                        os.remove(archivo)
                        print(f"üóëÔ∏è Archivo eliminado: {archivo}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è No se pudo eliminar '{archivo}': {e}")
            else:
                print("‚úÖ Archivos conservados por elecci√≥n del usuario.")

        except Exception as e:
            print(f"‚ùå Error al generar o reproducir el audio: {e}")


    #M√©todo para resumir el texto >= 100 palabras
    def resumir_texto(self, min_palabras=100, num_oraciones=5):
        idioma_actual = detect(self.texto)#Si el idioma es chino, segmentamos con jieba

        if idioma_actual.startswith("zh"):
            print("üîç Segmentando texto en chino con jieba...")
            palabras_chinas = list(jieba.cut(self.texto))
            texto_segmentado = " ".join(palabras_chinas)
        else:
             texto_segmentado = self.texto
        
        if len(texto_segmentado.split()) < min_palabras:    #Ya podemos comprobar la cantidad de palabras correctamente
            print(f"\n‚ö†Ô∏è El texto tiene menos de {min_palabras} palabras. No se puede resumir.")
            return False

        print(f"\nüß† Generando resumen...")
        resumen = summarize(self.texto, split = True)
        if resumen:
            resumen_texto = " ".join(resumen[:num_oraciones])
            self.texto = resumen_texto
            idioma_actual = detect(self.texto).upper()
            print(f"\nüîΩüîΩüîΩ RESUMEN EN {idioma_actual} üîΩüîΩüîΩ\n" + "-"*30)
            print(self.texto)
            return idioma_actual

   

    #M√©todo para traducir el texto a otro idioma
    def traducir_texto(self, idioma_destino="en"):
        idioma_detectado = detect(self.texto)
        print(f"\nüåê Traduciendo del idioma {idioma_detectado.upper()} a {idioma_destino.upper()}...")

        try:
            traductor = Translator()
            traduccion = traductor.translate(self.texto, src=idioma_detectado, dest=idioma_destino)
            self.texto = traduccion.text  # Sobrescribimos el texto con el traducido
            print("‚úÖ Traducci√≥n completada.")  
            return idioma_detectado          
        except Exception as e:
            print(f"‚ùå Error al traducir el texto: {e}")


    #M√©todo para contar palabras para determinar si hacer o no el resumen.
    def contar_palabras(self):
        idioma = detect(self.texto)
        if idioma.startswith("zh"):
            palabras = list(jieba.cut(self.texto))
            return len(palabras)
        else:
            return len(self.texto.split())
        

    # M√©todo para cerrar completamente la aplicaci√≥n
    def cerrar_aplicacion(self):
        import sys
        sys.exit(0)
    
        
    







# -------------------------------------------------------------------------------------
# Descripci√≥n del programa:
# Este script permite ingresar texto desde diferentes fuentes (fijo, manual, archivo o URL),
# detecta su idioma autom√°ticamente, da la opci√≥n de traducirlo a varios idiomas soportados
# (es, en, fr, it, de), puede generar un resumen si el texto tiene m√°s de 100 palabras,
# y convierte el texto final (original, resumido o traducido) en audio utilizando gTTS.
# -------------------------------------------------------------------------------------




"""
---------------------------------------------------------------
Este script permite convertir texto a voz desde distintas fuentes:
- Texto fijo
- Entrada manual
- Archivos locales
- Art√≠culos extra√≠dos desde una URL

Funcionalidades adicionales:
- Resume autom√°ticamente textos largos (m√°s 99 palabras)
- Traduce el texto a diferentes idiomas (es, en, fr, it, de, tr, zh)
- Reproduce el texto con voz usando gTTS

El flujo se adapta seg√∫n las decisiones del usuario:
- Puede elegir si quiere un resumen del texto.
- Puede traducir el contenido antes o despu√©s del resumen.
- Ofrece una experiencia fluida con mensajes claros y voz generada.

Autor: Jos√© Cabello Romero
Fecha: 19/07/2025
---------------------------------------------------------------
"""



